interface OrderData {
  services: Array<{
    name: string;
    quantity?: number;
    area?: number;
    type?: string;
    level?: string;
    price: number;
  }>;
  total: number;
  discount: number;
  finalTotal: number;
  date?: string;
  time?: string;
  customerInfo: {
    name: string;
    phone: string;
    address: string;
    comment?: string;
  };
}

export const sendToTelegram = async (orderData: OrderData): Promise<boolean> => {
  try {
    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
    const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –≤ Telegram:', {
      botToken: botToken ? botToken.substring(0, 10) + '...' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      chatId,
      orderData: {
        ...orderData,
        customerInfo: {
          ...orderData.customerInfo,
          phone: orderData.customerInfo.phone.substring(0, 8) + '...'
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat_id
    if (!botToken || !chatId) {
      console.error('‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram');
      throw new Error('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (botToken.length < 10) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞');
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞');
    }

    if (!chatId.startsWith('-') && !chatId.match(/^\d+$/)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chat_id –¥–ª—è Telegram');
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π chat_id –¥–ª—è Telegram');
    }

    const message = formatOrderMessage(orderData);
    
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      const result = await response.json();
      
      if (response.ok) {
        console.log('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram:', result);
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result);
        throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${result.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', fetchError);
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    throw error;
  }
};

const formatOrderMessage = (orderData: OrderData): string => {
  let message = '<b>üßπ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ CliningPro</b>\n\n';
  
  // Customer info
  message += '<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n';
  message += `–ò–º—è: ${orderData.customerInfo.name}\n`;
  message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.customerInfo.phone}\n`;
  message += `–ê–¥—Ä–µ—Å: ${orderData.customerInfo.address}\n`;
  if (orderData.customerInfo.comment) {
    message += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderData.customerInfo.comment}\n`;
  }
  
  // Services
  message += '\n<b>üõçÔ∏è –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n';
  orderData.services.forEach((service, index) => {
    message += `${index + 1}. ${service.name}\n`;
    if (service.area) {
      message += `   üìê –ü–ª–æ—â–∞–¥—å: ${service.area} –º¬≤\n`;
    }
    if (service.quantity) {
      message += `   üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${service.quantity}\n`;
    }
    if (service.type) {
      message += `   üìã –¢–∏–ø: ${service.type}\n`;
    }
    if (service.level) {
      message += `   üéØ –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è: ${service.level}\n`;
    }
    message += `   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price.toLocaleString()} —Å—É–º\n\n`;
  });
  
  // Schedule
  if (orderData.date || orderData.time) {
    message += '<b>üìÖ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:</b>\n';
    if (orderData.date) {
      message += `–î–∞—Ç–∞: ${orderData.date}\n`;
    }
    if (orderData.time) {
      message += `–í—Ä–µ–º—è: ${orderData.time}\n`;
    }
    message += '\n';
  }
  
  // Total
  message += '<b>üí∞ –ò—Ç–æ–≥–æ:</b>\n';
  message += `–°—É–º–º–∞: ${orderData.total.toLocaleString()} —Å—É–º\n`;
  if (orderData.discount > 0) {
    message += `üéâ –°–∫–∏–¥–∫–∞: ${orderData.discount.toLocaleString()} —Å—É–º\n`;
  }
  message += `<b>üí≥ –ö –æ–ø–ª–∞—Ç–µ: ${orderData.finalTotal.toLocaleString()} —Å—É–º</b>\n\n`;
  
  message += '<i>üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç!</i>';
  
  return message;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
export const testTelegramConnection = async (): Promise<boolean> => {
  try {
    const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
    
    if (!botToken || botToken === 'demo_token') {
      console.log('‚ö†Ô∏è Telegram bot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º)');
      return false;
    }

    const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`);
    const result = await response.json();
    
    if (response.ok && result.ok) {
      console.log('‚úÖ Telegram bot –ø–æ–¥–∫–ª—é—á–µ–Ω:', result.result.username);
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram bot:', result);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram:', error);
    return false;
  }
};